{"version":3,"sources":["components/Header.js","components/ParkCard.js","components/GoogleMap.js","components/Activities.js","components/OperatingHours.js","components/Park.js","App.js","reportWebVitals.js","index.js"],"names":["Header","onChange","showSearch","resetState","minimal","className","to","onClick","placeholder","e","target","value","getStatesFullName","states","stateNames","split","map","code","StatesMap","replace","ParkCard","park","onHeart","match","onPress","useRouteMatch","images","length","alt","altText","src","url","id","fullName","isHearted","description","substr","entranceFees","cost","MapPin","Map","lat","long","latitude","Number","longitude","bootstrapURLKeys","key","defaultCenter","lng","defaultZoom","Activities","activities","activity","i","name","OperatingHours","hours","today","Intl","DateTimeFormat","weekday","format","Date","day","standardHours","toLowerCase","Park","parks","filter","params","style","backgroundImage","operatingHours","App","SyncedParksData","ParksData","syncHistory","history","localStorage","getItem","JSON","parse","likes","includes","useState","parksData","setParksData","heartPark","saveAction","stringify","splice","indexOf","push","setItem","filterResults","query","basename","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17b6ae43.chunk.js","sourcesContent":["import './styles/Header.css'\nimport { FaMountain } from 'react-icons/fa';\nimport { FaSearchLocation } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nconst Header = ({ onChange, showSearch, resetState, minimal }) => {\n    return (\n        <header className={`header ${minimal ? 'header--thin' : ''}`}>\n            <h1><Link to='/' onClick={resetState}>National Park Tracker<span> <FaMountain /></span></Link></h1>\n            { showSearch ?\n                <form className='header__form'>\n                    <input className='header__search' placeholder='Find your favorites' onChange={(e) => onChange(e.target.value)}/>\n                    <FaSearchLocation />\n                </form>\n            : ''}\n        </header>\n    )\n}\n\nexport default Header","import './styles/ParkCard.css';\nimport StatesMap from '../data/States.json';\nimport { FaHeart } from 'react-icons/fa';\nimport { FaRegHeart } from 'react-icons/fa';\nimport { useRouteMatch, Link } from 'react-router-dom';\n\nconst ParkCard = ({ park, onHeart, onPress }) => {\n    let match = useRouteMatch();\n\n    return (\n        <li className='park-card'>\n            {park.images.length ?\n                <div className=\"park-card__img-wrap\"><img className='park-card__img' alt={park.images[0].altText} src={park.images[0].url}/></div>\n            :'No IMAGE'}\n            <div className='park-card__top'>\n                <Link to={`${match.url}${park.id}`}><h2 className='park-card__header'>{park.fullName}</h2></Link>\n                <button onClick={() => onHeart(park.id)} className={`park__heart ${park.isHearted ? 'filled' : ''}`}>{park.isHearted ? <FaHeart /> : <FaRegHeart/> }</button>\n            </div>\n            <p className='park-card__desc'>{park.description.substr(0, 225)}...</p>\n            <p>Location: <span className='park-card__location'>{getStatesFullName(park.states)}</span></p>\n            <p>Entry Fee: <span className='park-card__location'>{park.entranceFees[0].cost === '0.00' ? 'Free!' : `$${park.entranceFees[0].cost}`}</span></p>\n        </li>\n    )\n}\n\n// Converts a list of state code into the full name of the states\nconst getStatesFullName = (states) => {\n    let stateNames = ''\n    states.split(',').map((code) => { return stateNames += `${StatesMap[code]}, ` });\n    return stateNames.replace(/,\\s*$/, '');\n}\n\nexport default ParkCard","import GoogleMapReact from 'google-map-react';\nimport { FaMountain } from 'react-icons/fa';\n\nconst MapPin = () => <div className=\"park__pin\"><FaMountain /></div>;\n \nconst Map = ({ lat, long}) => {\n    let latitude = Number(lat);\n    let longitude = Number(long);\n    return (\n        <div className=\"park__map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: 'AIzaSyDaL1IAyZaOUBWwxZuFWcKo3rT6In29MTo' }}\n                defaultCenter={{ lat: latitude, lng: longitude }}\n                defaultZoom={5}>\n                <MapPin lat={latitude} lng={longitude} />\n            </GoogleMapReact>\n        </div>\n    )\n}\n\nexport default Map;\n","import './styles/Activity.css';\n\nconst Activities = ({ activities }) => {\n    return (\n        <div className=\"activities\">\n            { activities.map((activity, i) => ( <span key={i} className=\"activities__item\">{activity.name}</span> )) }\n        </div>\n    )\n}\n\nexport default Activities;\n","const OperatingHours = ({ hours }) => {\n    const today = new Intl.DateTimeFormat('en-US', {weekday: 'long'}).format(new Date());\n    // const todaysHours = hours[0].standardHours[today.toLowerCase()];\n    const days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ];\n    return (\n        <ul className=\"park__desc\">\n        {\n            days.map((day, i) => {\n                return  <li key={i} className={day === today ? 'park__hour today' : 'park__hour'}><span>{day}:</span> <span>{hours[0].standardHours[day.toLowerCase()]}</span></li>\n            })\n        }\n        </ul>\n    )\n}\n\nexport default OperatingHours;","import './styles/Park.css';\nimport Map from './GoogleMap';\nimport Activities from './Activities';\nimport OperatingHours from './OperatingHours';\nimport StatesMap from '../data/States.json';\nimport { FaHeart } from 'react-icons/fa';\nimport { FaCalendarCheck } from 'react-icons/fa';\nimport { FaMapPin } from 'react-icons/fa';\nimport { FaRegHeart } from 'react-icons/fa';\nimport { FaRegCompass } from 'react-icons/fa';\nimport { FaTag } from 'react-icons/fa';\nimport { useRouteMatch } from 'react-router-dom';\n\nconst Park = ({ parks, onHeart }) => {\n    let match = useRouteMatch('/:id');\n    let park = parks.filter((park) => { return park.id === match.params.id })[0];\n\n    // Converts a list of state code into the full name of the states\n    const getStatesFullName = (states) => {\n        let stateNames = ''\n        states.split(',').map((code) => { return stateNames += `${StatesMap[code]}, ` });\n        return stateNames.replace(/,\\s*$/, '');\n    }\n\n    return (\n        <>\n            <div className=\"park__banner\" style={{backgroundImage: `url(\"${park.images[0].url}\"`}}></div>\n            { park ?\n                <div className=\"park container\">\n                    <div className=\"park__col\">\n                        <div className='park__details'>\n                            <h2 className='park__header'>{park.fullName}\n                                <button onClick={() => onHeart(park.id)} className={`park__heart ${park.isHearted ? 'filled' : ''}`}>{park.isHearted ? <FaHeart /> : <FaRegHeart/> }</button>\n                            </h2>\n                            <FaRegCompass /><h3 className=\"park__subheader\">About</h3>\n                            <p className=\"park__desc\">{park.description}</p>\n                            <FaMapPin /><h3 className=\"park__subheader\">Location</h3>\n                            <p className=\"park__desc\">{getStatesFullName(park.states)}</p>\n                            <FaCalendarCheck /><h3 className=\"park__subheader\">Hours</h3>\n                            <OperatingHours hours={park.operatingHours} />\n                            <FaTag /><h3 className=\"park__subheader\">Tags</h3>\n                            <Activities activities={park.activities} />\n                        </div>\n                    </div>\n                    <div className=\"park__col\">\n                        <Map lat={park.latitude} long={park.longitude} />\n                    </div>\n                </div>\n            : '404 - The park you are looking for is lost!'\n            }\n        </>\n    )\n}\n\nexport default Park;","import { useState } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport ParksData from './data/ParksData.json';\nimport Header from './components/Header';\nimport ParkCard from './components/ParkCard';\nimport Park from './components/Park';\nimport './App.css';\n\n\nfunction App() {\n\n  // Sync initial state from past visits\n  let SyncedParksData = ParksData;\n\n  const syncHistory = () => {\n    let history = localStorage.getItem('likesHistory');\n    if (history) {\n      history = JSON.parse(history);\n      SyncedParksData = ParksData.map((park) => { return history.likes.includes(park.id) ? { ...park, isHearted: !park.isHearted} : park });\n    }\n  }\n\n  syncHistory();\n\n  const [parksData, setParksData] = useState(SyncedParksData);\n\n  const heartPark = (id) => {\n    setParksData(\n      parksData.map((park) => { return park.id === id ? { ...park, isHearted: !park.isHearted} : park })\n    );\n    saveAction(id);\n  }\n\n  const saveAction = (id) => {\n    let history = localStorage.getItem('likesHistory') || JSON.stringify({ likes: [] });\n    history = JSON.parse(history);\n\n    // Toggle \"isHearted\" state in DB\n    if (!history.likes.includes(id)) {\n      history.likes.push(id);\n    } else {\n      history.likes.splice(history.likes.indexOf(id), 1);\n    }\n\n    localStorage.setItem('likesHistory', JSON.stringify(history));\n    syncHistory();\n  }\n\n  const filterResults = (query) => {\n    resetState();\n    setParksData(\n      SyncedParksData.filter((park) => { return park.fullName.toLowerCase().includes(query.toLowerCase()) })\n    );\n  }\n\n  const resetState = () => {\n    setParksData(SyncedParksData);\n  }\n\n  return (\n    <Router basename=\"/parks\">\n      <div className=\"App\">\n        <Switch>\n          <Route path={\"/:parkId\"}>\n            <Header onChange={filterResults} showSearch={false} minimal={true} resetState={resetState} />\n            <Park parks={parksData} onHeart={heartPark} />\n          </Route>\n          <Route exact path={\"/\"}>\n            <Header onChange={filterResults} showSearch={true} resetState={resetState} />\n            <ul className=\"park-cards__container container\">\n              {parksData.map((park) => ( <ParkCard key={park.id} park={park} onHeart={heartPark} /> ))}\n            </ul>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}